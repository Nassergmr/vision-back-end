generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName               String
  lastName                String
  email                   String     @unique
  password                String
  avatar                  String?
  bio                     String?
  location                String?
  website                 String?
  facebook                String?
  instagram               String?
  youtube                 String?
  tiktok                  String?
  images                  Image[]    @relation("userImages")
  likes                   Like[]     @relation("userLikes")
  favorites               Favorite[] @relation("userFavorites")
  comments                Comment[]  @relation("userComments")
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  isVerified              Boolean    @default(false)
  verificationToken       String?
  verificationTokenExpiry DateTime?
}

model Image {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], name: "userImages")
  userId    String     @db.ObjectId
  likes     Like[]     @relation("imageLikes")
  favorites Favorite[] @relation("imagefavorites")
  comments  Comment[]  @relation("imageComments")
  url       String
  published Boolean    @default(false)
  addedAt   DateTime   @default(now())
}

model Like {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], name: "userLikes")
  userId  String @db.ObjectId
  image   Image  @relation(fields: [imageId], references: [id], name: "imageLikes")
  imageId String @db.ObjectId

  @@unique([userId, imageId])
}

model Favorite {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], name: "userFavorites")
  userId  String @db.ObjectId
  image   Image  @relation(fields: [imageId], references: [id], name: "imagefavorites")
  imageId String @db.ObjectId

  @@unique([userId, imageId])
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], name: "userComments")
  userId  String @db.ObjectId
  image   Image  @relation(fields: [imageId], references: [id], name: "imageComments")
  imageId String @db.ObjectId

  @@unique([userId, imageId])
}
